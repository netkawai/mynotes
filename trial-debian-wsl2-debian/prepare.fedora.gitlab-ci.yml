# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

include:
  - remote: 'https://gitlab.freedesktop.org/freedesktop/ci-templates/-/raw/34f4ade99434043f88e164933f570301fd18b125/templates/fedora.yml'


stages:          # List of stages for jobs, and their order of execution
  - prepare
  - build
  - test
  - deploy

.my.fedora@common:
  variables:
    FDO_DISTRIBUTION_VERSION: 37
    BASE_TAG: '2022-12-22.0'
    FDO_DISTRIBUTION_PACKAGES:
      asciidoc
      clang
      gcovr
      gdm
      gnome-shell
      sassc
      uncrustify
      xorg-x11-server-Xvfb
      mesa-dri-drivers
      xorg-x11-proto-devel
      qemu-system-x86-core
      busybox
      gi-docgen
      python3-pip
      pkgconfig(libgcrypt)
      pkgconfig(colord)
      pkgconfig(lcms2)

    FDO_DISTRIBUTION_EXEC: |
      dnf install -y 'dnf-command(builddep)' &&

      dnf builddep -y mutter --setopt=install_weak_deps=False &&
      dnf builddep -y gnome-shell --setopt=install_weak_deps=False &&
      dnf builddep -y wayland --setopt=install_weak_deps=False &&
      dnf builddep -y wayland-protocols --setopt=install_weak_deps=False &&
      dnf builddep -y kernel --setopt=install_weak_deps=False &&

      ./.gitlab-ci/install-meson-project.sh \
        https://gitlab.gnome.org/jadahl/catch.git \
        main . 29ad36e2b1d28ac9d8b2bc44af46296cb1db5d66 &&

      ./.gitlab-ci/install-meson-project.sh \
        https://gitlab.gnome.org/GNOME/glib.git \
        2.75.1 . &&

      pip install git+https://github.com/martinpitt/python-dbusmock.git@743da675c37bfc469ec385b88c3b4ad4838cfa48 &&

      rpm -e --nodeps gnome-bluetooth-libs-devel \
                      mutter mutter-devel \
                      gnome-shell &&

      dnf clean all &&

      if [[ x"$(uname -m )" = "xx86_64" ]] ; then
        meson build -Dkvm_tests=true &&
        ninja -C build src/tests/kvm/bzImage &&
        mkdir -p /opt/mutter &&
        cp build/src/tests/kvm/bzImage /opt/mutter/bzImage &&

        dnf install -y python3-pyelftools &&

        git clone https://github.com/jadahl/virtme.git &&
        cd virtme &&
        git checkout 87bcebe63f61e2a3ccd418b0903eab90113a47ae &&
        ./setup.py install --prefix=/usr &&
        cd .. &&
        rm -rf virtme
      fi
  retry:
    max: 2
    when:
      - 'always'

.my.fedora@x86_64:
  extends: .my.fedora@common
  variables:
    FDO_DISTRIBUTION_TAG: "x86_64-${BASE_TAG}"

build-fedora-container@x86_64:
  stage: prepare
  extends:
    - .fdo.container-build@fedora@x86_64
    - .my.fedora@x86_64
  variables:
    GIT_STRATEGY: none


build-job:       # This job runs in the build stage, which runs first.
  stage: build
  needs:
    - build-fedora-container@x86_64
  script:
    - meson -- help
  allow_failure: true

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
