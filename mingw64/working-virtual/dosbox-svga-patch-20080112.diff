
E:\dosbox-dev>diff -ruN -x config.h -x Debug -x Release -x *.ncb -x *.suo -x .cvsignore dosbox-cvs dosbox-svga-stage3 
diff -ruN -x config.h -x Debug -x Release -x '*.ncb' -x '*.suo' -x .cvsignore dosbox-cvs/include/dosbox.h dosbox-svga-stage3/include/dosbox.h
--- dosbox-cvs/include/dosbox.h	2008-01-09 12:34:22.000000000 +0000
+++ dosbox-svga-stage3/include/dosbox.h	2008-01-09 21:02:16.000000000 +0000
@@ -61,6 +61,7 @@
 extern SVGACards svgaCard;
 extern MachineType machine;
 extern bool SDLNetInited;
+extern char machineFeatures[80];
 
 #define IS_TANDY_ARCH ((machine==MCH_TANDY) || (machine==MCH_PCJR))
 #define IS_EGAVGA_ARCH ((machine==MCH_EGA) || (machine==MCH_VGA))
diff -ruN -x config.h -x Debug -x Release -x '*.ncb' -x '*.suo' -x .cvsignore dosbox-cvs/src/dosbox.cpp dosbox-svga-stage3/src/dosbox.cpp
--- dosbox-cvs/src/dosbox.cpp	2008-01-09 12:34:22.000000000 +0000
+++ dosbox-svga-stage3/src/dosbox.cpp	2008-01-09 22:12:20.000000000 +0000
@@ -43,6 +43,7 @@
 Config * control;
 MachineType machine;
 SVGACards svgaCard;
+char machineFeatures[80];
 
 /* The whole load of startups for all the subfunctions */
 void MSG_Init(Section_prop *);
@@ -260,31 +261,37 @@
 	const char * mtype;
 	if (control->cmdline->FindString("-machine",cmd_machine,true)) mtype=cmd_machine.c_str();
 	else mtype=section->Get_string("machine");
-	if (strcasecmp(mtype,"cga")==0) machine=MCH_CGA;
-	else if (strcasecmp(mtype,"tandy")==0) machine=MCH_TANDY;
-	else if (strcasecmp(mtype,"pcjr")==0) machine=MCH_PCJR;
-	else if (strcasecmp(mtype,"hercules")==0) machine=MCH_HERC;
-	else if (strcasecmp(mtype,"ega")==0) machine=MCH_EGA;
-	else if ((strcasecmp(mtype,"vga")==0) || (strcasecmp(mtype,"vga_s3")==0) ||
-			(strcasecmp(mtype,"svga")==0) || (strcasecmp(mtype,"svga_s3")==0)) {
-		machine=MCH_VGA;
-		svgaCard=SVGA_S3Trio;
-	} else if ((strcasecmp(mtype,"vga_et4000")==0) || (strcasecmp(mtype,"svga_et4000")==0)) {
+	if (strncasecmp(mtype,"cga",3)==0) machine=MCH_CGA;
+	else if (strncasecmp(mtype,"tandy",5)==0) machine=MCH_TANDY;
+	else if (strncasecmp(mtype,"pcjr",4)==0) machine=MCH_PCJR;
+	else if (strncasecmp(mtype,"hercules",8)==0) machine=MCH_HERC;
+	else if (strncasecmp(mtype,"ega",3)==0) machine=MCH_EGA;
+	else if ((strncasecmp(mtype,"vga_et4000",10)==0) || (strncasecmp(mtype,"svga_et4000",11)==0)) {
 		machine=MCH_VGA;
 		svgaCard=SVGA_TsengET4K;
-	} else if ((strcasecmp(mtype,"vga_et3000")==0) || (strcasecmp(mtype,"svga_et3000")==0)) {
+	} else if ((strncasecmp(mtype,"vga_et3000",10)==0) || (strncasecmp(mtype,"svga_et3000",11)==0)) {
 		machine=MCH_VGA;
 		svgaCard=SVGA_TsengET3K;
-	} else if ((strcasecmp(mtype,"vga_pvga1a")==0) || (strcasecmp(mtype,"svga_pvga1a")==0) || 
-		(strcasecmp(mtype,"svga_paradise")==0)) {
+	} else if ((strncasecmp(mtype,"vga_pvga1a",10)==0) || (strncasecmp(mtype,"svga_pvga1a",11)==0) ||
+		(strncasecmp(mtype,"vga_paradise",12)==0)) {
 		machine=MCH_VGA;
 		svgaCard=SVGA_ParadisePVGA1A;
-	} else if (strcasecmp(mtype,"vgaonly")==0) {
+	} else if (strncasecmp(mtype,"vgaonly",7)==0) {
 		machine=MCH_VGA;
 		svgaCard=SVGA_None;
+	} else if ((strncasecmp(mtype,"vga",3)==0) || (strncasecmp(mtype,"vga_s3",6)==0) ||
+			(strncasecmp(mtype,"svga",4)==0) || (strncasecmp(mtype,"svga_s3",7)==0)) {
+		machine=MCH_VGA;
+		svgaCard=SVGA_S3Trio;
 	} else {
 		LOG_MSG("DOSBOX:Unknown machine type %s",mtype);
 	}
+	char* mfeature=strchr(mtype, ' ');
+	if (mfeature) {
+		strncpy(machineFeatures, mfeature+1, 80);
+	} else {
+		machineFeatures[0] = 0;
+	}
 }
 
 
diff -ruN -x config.h -x Debug -x Release -x '*.ncb' -x '*.suo' -x .cvsignore dosbox-cvs/src/hardware/vga_paradise.cpp dosbox-svga-stage3/src/hardware/vga_paradise.cpp
--- dosbox-cvs/src/hardware/vga_paradise.cpp	2008-01-12 09:37:48.000000000 +0000
+++ dosbox-svga-stage3/src/hardware/vga_paradise.cpp	2008-01-12 20:10:06.000000000 +0000
@@ -217,6 +217,25 @@
 	VGA_SetClock(2,32400); // could not find documentation
 	VGA_SetClock(3,35900);
 
+	// Get VRAM size
+	vga.vmemsize = 0;
+	if (strlen(machineFeatures) > 0) {
+		char features[80];
+		strcpy(features, machineFeatures);
+		strlwr(features);
+        char* token = strtok(features, " ");
+		while (token) {
+			if (isdigit(token[0])) {
+				vga.vmemsize = atoi(token);
+				// Interpret small numbers as megabytes
+				if(vga.vmemsize < 16)
+					vga.vmemsize *= 1024;
+				vga.vmemsize *= 1024;
+			}
+			token = strtok(NULL, " ");
+		}
+	}
+
 	// Adjust memory, default to 512K
 	if (vga.vmemsize == 0)
 		vga.vmemsize = 512*1024;
diff -ruN -x config.h -x Debug -x Release -x '*.ncb' -x '*.suo' -x .cvsignore dosbox-cvs/src/hardware/vga_s3.cpp dosbox-svga-stage3/src/hardware/vga_s3.cpp
--- dosbox-cvs/src/hardware/vga_s3.cpp	2008-01-12 09:37:48.000000000 +0000
+++ dosbox-svga-stage3/src/hardware/vga_s3.cpp	2008-01-12 20:07:26.000000000 +0000
@@ -21,6 +21,7 @@
 #include "dosbox.h"
 #include "inout.h"
 #include "vga.h"
+#include "setup.h"
 
 void SVGA_S3_WriteCRTC(Bitu reg,Bitu val,Bitu iolen) {
 	switch (reg) {
@@ -503,6 +504,25 @@
 	svga.hardware_cursor_active = &SVGA_S3_HWCursorActive;
 	svga.accepts_mode = &SVGA_S3_AcceptsMode;
 
+	// Get VRAM size
+	vga.vmemsize = 0;
+	if (strlen(machineFeatures) > 0) {
+		char features[80];
+		strcpy(features, machineFeatures);
+		strlwr(features);
+        char* token = strtok(features, " ");
+		while (token) {
+			if (isdigit(token[0])) {
+				vga.vmemsize = atoi(token);
+				// Interpret small numbers as megabytes
+				if(vga.vmemsize < 16)
+					vga.vmemsize *= 1024;
+				vga.vmemsize *= 1024;
+			}
+			token = strtok(NULL, " ");
+		}
+	}
+
 	if (vga.vmemsize == 0)
 		vga.vmemsize = VGA_MEMORY; // the most common S3 configuration
 
diff -ruN -x config.h -x Debug -x Release -x '*.ncb' -x '*.suo' -x .cvsignore dosbox-cvs/src/hardware/vga_tseng.cpp dosbox-svga-stage3/src/hardware/vga_tseng.cpp
--- dosbox-cvs/src/hardware/vga_tseng.cpp	2008-01-12 09:37:48.000000000 +0000
+++ dosbox-svga-stage3/src/hardware/vga_tseng.cpp	2008-01-12 15:21:10.000000000 +0000
@@ -47,6 +47,8 @@
 
 	Bitu clockFreq[16];
 	Bitu biosMode;
+
+	Bitu version;
 } SVGA_ET4K_DATA;
 
 static SVGA_ET4K_DATA et4k = { 1, 0, /* the rest are 0s */ };
@@ -398,8 +400,7 @@
 }
 
 bool AcceptsMode_ET4K(Bitu mode) {
-	return VideoModeMemSize(mode) < vga.vmemsize;
-//	return mode != 0x3d;
+	return VideoModeMemSize(mode) < vga.vmemsize && (mode != 0x3d || et4k.version > 0);
 }
 
 void SVGA_Setup_TsengET4K(void) {
@@ -437,6 +438,27 @@
 	IO_RegisterReadHandler(0x3cd,read_p3cd_et4k,IO_MB);
 	IO_RegisterWriteHandler(0x3cd,write_p3cd_et4k,IO_MB);
 
+	// Get VRAM size and card type flag ("new" card)
+	vga.vmemsize = 0;
+	if (strlen(machineFeatures) > 0) {
+		char features[80];
+		strcpy(features, machineFeatures);
+		strlwr(features);
+        char* token = strtok(features, " ");
+		while (token) {
+			if(strcmp(token, "new") == 0) {
+				et4k.version = 1;
+			} else if (isdigit(token[0])) {
+				vga.vmemsize = atoi(token);
+				// Interpret small numbers as megabytes
+				if(vga.vmemsize < 16)
+					vga.vmemsize *= 1024;
+				vga.vmemsize *= 1024;
+			}
+			token = strtok(NULL, " ");
+		}
+	}
+
 	// Default to 1M of VRAM
 	if (vga.vmemsize == 0)
 		vga.vmemsize = 1024*1024;
